<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Heng Li's blog</title>
 <link href="http://lh3.github.io/" rel="self"/>
 <link href="http://lh3.github.io"/>
 <updated>2014-07-12T23:55:33-04:00</updated>
 <id>http://lh3.github.io</id>
 <author>
   <name>Heng Li</name>
   <email>lh3@me.com</email>
 </author>

 
 <entry>
   <title>About static linking</title>
   <link href="http://lh3.github.io/2014/07/12/about-static-linking"/>
   <updated>2014-07-12T00:00:00-04:00</updated>
   <id>http://lh3.github.io/2014/07/12/about-static-linking</id>
   <content type="html">
&lt;p&gt;One of the things I hate most about Linux is to compile software. Sometimes it
is a nightmare: lack of root permission, requirement of new gcc, dependencies
on huge or weird libraries, etc. Whenever these happens, I ask myself: why not
just distribute statically linked binaries such that they can run on most Linux
distributions?  I knew a few reasons, but only today I took the question a
little more serious and did a google search. The following two links are
quite useful: &lt;a href=&quot;http://stackoverflow.com/questions/1993390/static-linking-vs-dynamic-linking&quot;&gt;static linking vs. dynamic linking&lt;/a&gt; and &lt;a href=&quot;http://www.akkadia.org/drepper/no_static_linking.html&quot;&gt;static linking
considered harmful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary, static linking has the following disadvantages: more likely to be
attacked, not receiving patches in dynamic libraries, more memory hungry, not
truly static, sometimes not flexible and potentially violating GPL. I buy all
these arguments. However, for tools in bioinformatics, these are not big
concerns because most bioinformatics tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;are not system utilities and are not security-critical.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;are only linked to small dynamic libraries. Statically linking the tools will
not cost much memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;do not often use glibc features that have to be dynamically linked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;are distributed under a license compatible with LGPL.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most command-line bioinformatics tools can be statically linked without
problems. And I think we should create a repository for precompiled
bioinformatics tools. This will at least make my life much easier. What about
you?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Abreak: evaluating de novo assemblies</title>
   <link href="http://lh3.github.io/2014/07/07/abreak-evaluating-de-novo-assemblies"/>
   <updated>2014-07-07T00:00:00-04:00</updated>
   <id>http://lh3.github.io/2014/07/07/abreak-evaluating-de-novo-assemblies</id>
   <content type="html">
&lt;p&gt;“Abreak” is a subcommand of &lt;a href=&quot;https://github.com/samtools/htslib&quot;&gt;htscmd&lt;/a&gt; on &lt;a href=&quot;https://github.com/samtools/htslib/tree/lite&quot;&gt;the lite branch&lt;/a&gt;. It
takes an assembly-to-reference alignment as input and counts the number of
alignment break points. An earlier version was used in &lt;a href=&quot;http://bioinformatics.oxfordjournals.org/content/28/14/1838&quot;&gt;my fermi paper&lt;/a&gt;
to measure the missassembly rate of human de novo assemblies. A typical output
looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Number of unmapped contigs: 239
Total length of unmapped contigs: 54588
Number of alignments dropped due to excessive overlaps: 0
Mapped contig bases: 2933399461
Mapped N50: 6241
Number of break points: 102146
Number of Q10 break points longer than (0,100,200,500)bp: (28719,7206,4644,3222)
Number of break points after patching gaps short than 500bp: 94298
Number of Q10 break points longer than (0,100,200,500)bp after gap patching: (23326,5320,3369,2194)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here it gives the mapped contig bases, mapped N50 and number of break points
with flanking sequences longer than 0, 100, 200 and 500bp.&lt;/p&gt;

&lt;p&gt;Although &lt;a href=&quot;http://ccb.jhu.edu/gage_b/&quot;&gt;GAGE-B&lt;/a&gt; and &lt;a href=&quot;http://bioinf.spbau.ru/en/quast&quot;&gt;QUAST&lt;/a&gt; are more powerful, the use of
MUMmer limits them to small genomes only. In contrast, “abreak” works with any
aligners supporting chimeric alignment. When BWA-SW or BWA-MEM is used to map
contigs, “abreak” can easily and efficiently work with mammal-sized assemblies.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Random access to zlib compressed files</title>
   <link href="http://lh3.github.io/2014/07/05/random-access-to-zlib-compressed-files"/>
   <updated>2014-07-05T00:00:00-04:00</updated>
   <id>http://lh3.github.io/2014/07/05/random-access-to-zlib-compressed-files</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.zlib.net&quot;&gt;Zlib&lt;/a&gt;/&lt;a href=&quot;http://www.gzip.org&quot;&gt;gzip&lt;/a&gt; is probably the most popular library/tool for general
data compression. In zlib, there is an API &lt;code&gt;gzseek()&lt;/code&gt; which places the file
position indicator at a specified offset in the uncompressed file. However,
whenever it gets called, it starts from the beginning of the file and reads
through all the data up to the specified offset. For huge files, this is very
slow.&lt;/p&gt;

&lt;p&gt;It is actually possible to achieve faster random access in a generic gzip file.
The &lt;a href=&quot;http://www.opensource.apple.com/source/zlib/zlib-22/zlib/examples/zran.c&quot;&gt;zran.c&lt;/a&gt; in the zlib source code package gives an example
implementation. It works by keeping 32kB uncompressed data right before an
access point. With the 32kB data, we can decompress data after the access
point - we do not need to decompress from the beginning. My friend Jue Ruan
found this example and and implemented &lt;a href=&quot;https://sourceforge.net/p/maq/code/HEAD/tree/trunk/maqview/zrio.h&quot;&gt;zrio&lt;/a&gt;, a small library that
keeps the 32kB data in an index file to achieve random access to generic gzip
files. This library is used in &lt;a href=&quot;http://maq.sourceforge.net/maqview.shtml&quot;&gt;maqview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, keeping 32kB data per access point is quite heavy. To drop this 32kB
dependency, Jue sought a better solution: calling
&lt;code&gt;deflate(stream,Z_FULL_FLUSH)&lt;/code&gt; every 64kB. After &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt;, we can decompress
the following data independent of the previous data – keeping 32kB is not
necessary any more. The resultant compressed stream is still fully compatible
with zlib. Jue implemented this idea in &lt;a href=&quot;https://github.com/lh3/samtools-legacy/blob/master/razf.h&quot;&gt;RAZF&lt;/a&gt;. In addition to this
stream reset, RAZF also writes an index table at the end of the file. Given
an uncompressed offset, we can look up the table to find the nearest access
point ahead of the offset to achieve random access. The index is much smaller
and the speed is much faster.&lt;/p&gt;

&lt;p&gt;The first prototype of &lt;a href=&quot;http://samtools.sourceforge.net&quot;&gt;BAM&lt;/a&gt; was using RAZF. At that time, a major concern
was that RAZF is using low-level zlib APIs which were not available in other
programming languages. This would limit the adoption of BAM. The size of the
index might also become a concern given &amp;gt;100GB files. In the discussion,
&lt;a href=&quot;http://www.well.ox.ac.uk/dr-gerton-lunter&quot;&gt;Gerton Lunter&lt;/a&gt; directed us to &lt;a href=&quot;http://linuxcommand.org/man_pages/dictzip1.html&quot;&gt;dictzip&lt;/a&gt;, another tool for
random access in gzip-compatible files. Dictzip would not work well for a huge
BAM due to the constraint of the gzip header. However, its key idea –
concatenating small gzip blocks – led Bob Handsaker to design something
better: &lt;a href=&quot;http://samtools.github.io/hts-specs/SAMv1.pdf&quot;&gt;BGZF&lt;/a&gt; (section 4.1).&lt;/p&gt;

&lt;p&gt;The key observation Bob made in BGZF is that when we seek the middle of a
compressed file, all we need is a virtual position which is not necessarily the
real position in the uncompressed file. In BGZF, the virtual position is a
tuple &lt;code&gt;(block_file_position,in_block_offset)&lt;/code&gt;, where &lt;code&gt;block_file_position&lt;/code&gt; is
the file postion, in the compressed file, of the start of a gzip block and
&lt;code&gt;in_block_offset&lt;/code&gt; is the offset within the uncompressed gzip block. With the
tuple, we can unambiguously pinpoint a byte in the uncompressed file. When we
keep the tuple in an index file, we can jump to the position without looking up
another index. BGZF is smaller than RAZF and easier to implement. It has been
implemented in C, Java, Javascript and Go. Recently, Petr Danecek has &lt;a href=&quot;https://github.com/samtools/htslib/blob/develop/htslib/bgzf.h&quot;&gt;extended
BGZF&lt;/a&gt; with an extra index file to achieve random access with offset in
uncompressed file.&lt;/p&gt;

&lt;p&gt;In the analysis of high-throughput sequencing data, BGZF plays a crucial role
in reducing the storage cost while maintaining the easy accessibility to the
data. It is a proven technology scaled to TB of data.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>My blog</title>
   <link href="http://lh3.github.io/2014/07/05/my-blog"/>
   <updated>2014-07-05T00:00:00-04:00</updated>
   <id>http://lh3.github.io/2014/07/05/my-blog</id>
   <content type="html">
&lt;p&gt;I have a &lt;a href=&quot;http://lh3lh3.users.sourceforge.net&quot;&gt;homepage&lt;/a&gt;. It is using a CSS template heavily modified from a
theme from &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Page_Creator&quot;&gt;Google Pages&lt;/a&gt;, which has long been discontinued. This
template has been used for the &lt;a href=&quot;http://samtools.sourceforge.net&quot;&gt;SAMtools website&lt;/a&gt; among a few others.
I still like the general look-and-feel of the template, but I do have a few
concerns with my homepage. Firstly, I do not like to write raw HTML, as is
opposed to MarkDown. Secondly, as a novice web developer, I still have troubles
with fine tuning the CSS template. Thirdly and most importantly, I am unable to
get feedbacks from readers. While there are services like &lt;a href=&quot;https://disqus.com&quot;&gt;Disqus&lt;/a&gt;, I
am too lazy to learn how to integrate them. After all, I am a scietific
researcher. Due to these concerns, I have not updated my homepage often in the
past few years.&lt;/p&gt;

&lt;p&gt;On the other hand, I sometimes feel it is necessary to describe my preliminary
works and express my immature thoughts in short articles. Maybe some of them
could be useful to others as well. Blog posts seem a good way to achieve the
goal. This is why I started this blog. I do not know where it goes or if I will
update often, but a little bit more documentation is better than nothing, I
believe.&lt;/p&gt;

</content>
 </entry>
 
 
</feed>